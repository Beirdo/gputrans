/*
 *  This file is part of the gputrans package
 *  Copyright (C) 2006 Gavin Hurlbut
 *
 *  gputrans is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*HEADER---------------------------------------------------
* $Id$
*
* Copyright 2006 Gavin Hurlbut
* All rights reserved
*
*/

float3 contrast_frame( float2  coord               : TEXCOORD0,
                       uniform samplerRECT frame   : TEXUNIT0,
                       uniform float   luma_contrast,
                       uniform float   chroma_contrast) : COLOR
{
    string id = "$Id$";

    float3 value;

    value = texRECT( frame, coord ).xyz;
    value -= 0.5;
    value.x = value.x * luma_contrast;
    value.yz = value.yz * chroma_contrast;
    value += 0.5;
    value.x = clamp( value.x, 0.062745098, 0.921568627 );
    value.yz = clamp( value.yz, 0.062745098, 0.937254902 );

    return value;
}

float3 diff_frame( float2  coord               : TEXCOORD0,
                   uniform samplerRECT frameA  : TEXUNIT0,
                   uniform samplerRECT frameB  : TEXUNIT1) : COLOR
{
    string id = "$Id$";

    float3 value;

    value = texRECT( frameA, coord ).xyz - texRECT( frameB, coord ).xyz;
    value = abs(value);

    return value;
}

float thresh_diff( float2  coord               : TEXCOORD0,
                   uniform samplerRECT frame   : TEXUNIT0,
                   uniform float threshold) : COLOR
{
    string id = "$Id$";

    float3 value;
    float output;

    value = texRECT( frame, coord ).xyz;
    value -= threshold;
    value.x = step( 0.0, value.x );
    value.y = step( 0.0, value.y );
    value.z = step( 0.0, value.z );

    output = value.x + value.y + value.z;

    return output;
}

float decimate_thresh_diff( float2  topleft             : TEXCOORD0,
                            float2  topright            : TEXCOORD1,
                            float2  bottomright         : TEXCOORD2,
                            float2  bottomleft          : TEXCOORD3,
                            uniform samplerRECT frame   : TEXUNIT0 ) : COLOR
{
    string id = "$Id$";

    float value;

    value  = texRECT(frame, topleft).x;
    value += texRECT(frame, topright).x;
    value += texRECT(frame, bottomleft).x;
    value += texRECT(frame, bottomright).x;
    
    return value;
}

float3 move_frame( float2   coord               : TEXCOORD0,
                   uniform samplerRECT frame    : TEXUNIT0,
                   uniform samplerRECT vector   : TEXUNIT1 ) : COLOR
{
    string id = "$Id$";

    float3 value;
    float2 newCoord;

    newCoord = coord + texRECT(vector, coord).xy;
    value = texRECT(frame, newCoord).xyz;
    
    return value;
}

float3 average_frame( float2 coord               : TEXCOORD0,
                      uniform samplerRECT frame  : TEXUNIT0,
                      uniform samplerRECT avg    : TEXUNIT1,
                      uniform float delay ) : COLOR
{
    string id = "$Id$";

    float3 value;
    float3 newval;

    value  = texRECT( avg, coord ).xyz;
    newval = texRECT( frame, coord ).xyz;

    value = ((value * delay) + newval) / (delay + 1);

    return value;
}

float thresholded_difference( float2 coord                 : TEXCOORD0,
                              uniform samplerRECT frameA   : TEXUNIT0,
                              uniform samplerRECT frameB   : TEXUNIT1,
                              uniform float threshold ) : COLOR
{
    string id = "$Id$";

    float value;

    value = texRECT( frameA, coord ).x - texRECT( frameB, coord ).x;
    value = abs(value);
    value = step( threshold, value ) * value;

    return value;
}

float lowpass_difference( float2 coord              : TEXCOORD0,
                          uniform samplerRECT frame : TEXUNIT0 ) : COLOR
{
    string id = "$Id$";

    float value;

    value  = texRECT( frame, coord ).x;
    value += texRECT( frame, coord + float2(-1,-1) ).x;
    value += texRECT( frame, coord + float2(-1, 0) ).x;
    value += texRECT( frame, coord + float2(-1, 1) ).x;
    value += texRECT( frame, coord + float2( 0,-1) ).x;
    value += texRECT( frame, coord + float2( 0, 1) ).x;
    value += texRECT( frame, coord + float2( 1,-1) ).x;
    value += texRECT( frame, coord + float2( 1, 0) ).x;
    value += texRECT( frame, coord + float2( 1, 1) ).x;
    value /= 9.0;

    value = clamp(4.0 * value * value, 0.0, 1.0);

    return value;
}

float3 correct_frame2( float2 coord                 : TEXCOORD0,
                       uniform samplerRECT frameA   : TEXUNIT0,
                       uniform samplerRECT frameB   : TEXUNIT1,
                       uniform samplerRECT diffY    : TEXUNIT2,
                       uniform float threshold ) : COLOR
{
    string id = "$Id$";

    float3 q;
    float3 value;
    float3 valA;
    float3 valB;
    float3 f1;
    float3 f2;
    float3 output;

    valA  = texRECT( frameA, coord ).xyz;
    valB  = texRECT( frameB, coord ).xyz;
    q     = abs( valA - valB );
    f1    = clamp((q - threshold) / threshold, 0.0, 1.0);
    f2    = 1.0 - f1;

    value = (valB * f2) + (valA * f1);
    output.x = ( q.x > threshold ? value.x : valB.x );
    output.y = ( q.y > threshold ? value.y : valB.y );
    output.z = ( q.z > threshold ? value.z : valB.z );

    return output;
}

float3 denoise_frame_pass2( float2 coord                : TEXCOORD0,
                            uniform samplerRECT frameA  : TEXUNIT0,
                            uniform samplerRECT frameB  : TEXUNIT1,
                            uniform float pp_threshold ) : COLOR
{
    string id = "$Id$";

    float3 d;
    float3 valA;
    float3 valB;
    float3 f1;
    float3 f2;
    float3 output;

    valA = texRECT( frameA, coord ).xyz;
    valB = texRECT( frameB, coord ).xyz;
    valB.yz = ( (valB.yz * 2.0) + valA.yz ) / 3.0;

    d       = abs( valA - valB );
    f1.x    = clamp( d.x / pp_threshold, 0.0, 1.0 );
    f1.yz   = clamp( (d.yz - pp_threshold) / pp_threshold, 0.0, 1.0 );
    f2      = 1.0 - f1;

    output = (valA * f1) + (valB * f2);

    return output;
}

float3 sharpen_frame( float2 coord                : TEXCOORD0,
                      uniform samplerRECT frame   : TEXUNIT0,
                      uniform float sharpen ) : COLOR
{
    string id = "$Id$";

    float3 value;
    float d;
    float m;
    float3 output;

    value = texRECT( frame, coord ).xyz;
    m  = value.x;
    m += texRECT( frame, coord + float2(1,0) ).x;
    m += texRECT( frame, coord + float2(1,1) ).x;
    m += texRECT( frame, coord + float2(0,1) ).x;
    m /= 4.0;

    d  = value.x - m;
    d *= sharpen;

    output.x = clamp( m+d, 0.062745098, 0.921568627 );
    output.yz = value.yz;

    return output;
}

/*
 * vim:ts=4:sw=4:ai:et:si:sts=4
 */

