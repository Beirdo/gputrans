/*
 *  This file is part of the gputrans package
 *  Copyright (C) 2006 Gavin Hurlbut
 *
 *  gputrans is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*HEADER---------------------------------------------------
* $Id$
*
* Copyright 2006 Gavin Hurlbut
* All rights reserved
*
*/

float3 offset  = { -0.062745098, -0.5, -0.5 };
float3 factor  = { 1.164383562, 1.0, 1.0 };
float3 factor2 = { 0.858823529, 1.0, 1.0 };

float3 yuv_input( float2 coord               : TEXCOORD0,
                  uniform samplerRECT Ytex   : TEXUNIT0,
                  uniform samplerRECT Utex   : TEXUNIT1,
                  uniform samplerRECT Vtex   : TEXUNIT2) : COLOR
{
    string id = "$Id$";

    float2 coord2 = coord / 2.0;
    float3 output;

    /* Translate Y [16,235] -> [ 0.0625, 0.91796875 ] (done by openGL) 
     *                      -> [ 0.0,    0.85546875 ]
     *                      -> [ 0.0,    1.0 ]
     *
     * Translate U&V [16,239] -> [  0.0625, 0.93359375 ] (done by openGL)
     *                        -> [ -0.4375, 0.43359375 ]
     *                        -> [ -0.5,    0.495535714 ]
     */
    output.x = texRECT(Ytex, coord).x;
    output.y = texRECT(Utex, coord2).x;
    output.z = texRECT(Vtex, coord2).x;

    /*
    output = factor * (output + offset); 
    */

    return output;
}


float y_output( float2  coord               : TEXCOORD0,
                uniform samplerRECT frame   : TEXUNIT0) : COLOR
{
    string id = "$Id$";

    float3 value;
    float output;

    output = texRECT(frame, coord).x;
    /*
    value = ((float3)texRECT(frame, coord) * factor2) - offset;
    output = value.x;
    */

    return output;
}

float u_output( float2  coord               : TEXCOORD0,
                uniform samplerRECT frame   : TEXUNIT0) : COLOR
{
    string id = "$Id$";

    float3 value;
    float output;

    output = texRECT(frame, coord).y;
    /*
    value = ((float3)texRECT(frame, coord) * factor2) - offset;
    output = value.y;
    */

    return output;
}

float v_output( float2  coord               : TEXCOORD0,
                uniform samplerRECT frame   : TEXUNIT0) : COLOR
{
    string id = "$Id$";

    float3 value;
    float output;

    output = texRECT(frame, coord).z;
    /*
    value = ((float3)texRECT(frame, coord) * factor2) - offset;
    output = value.z;
    */

    return output;
}


/*
 * vim:ts=4:sw=4:ai:et:si:sts=4
 */

