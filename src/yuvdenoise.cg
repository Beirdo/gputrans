/*
 *  This file is part of the gputrans package
 *  Copyright (C) 2006 Gavin Hurlbut
 *
 *  gputrans is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*HEADER---------------------------------------------------
* $Id$
*
* Copyright 2006 Gavin Hurlbut
* All rights reserved
*
*/

float3 contrast_frame( float2  coord               : TEXCOORD0,
                       uniform samplerRECT frame   : TEXUNIT1,
                       uniform float2  contrast) : COLOR
{
    string id = "$Id$";

    float3 value;

    value = texRECT( frame, coord ).xyz;
    value -= 0.5;
    value.x = value.x * contrast.x;
    value.yz = value.yz * contrast.y;
    value += 0.5;
    value.x = clamp( value.x, 0.062745098, 0.921568627 );
    value.yz = clamp( value.yz, 0.062745098, 0.937254902 );

    return value;
}

float3 diff_frame( float2  coord               : TEXCOORD0,
                   uniform samplerRECT frameA  : TEXUNIT1,
                   uniform samplerRECT frameB  : TEXUNIT2) : COLOR
{
    string id = "$Id$";

    float3 value;

    value = texRECT( frameA, coord ).xyz - texRECT( frameB, coord ).xyz;
    value = abs(value);

    return value;
}

float thresh_diff( float2  coord               : TEXCOORD0,
                   uniform samplerRECT frame   : TEXUNIT1,
                   uniform float threshold) : COLOR
{
    string id = "$Id$";

    float3 value;
    float output;

    value = texRECT( frame, coord ).xyz;
    value -= threshold;
    value.x = step( 0.0, value.x );
    value.y = step( 0.0, value.y );
    value.z = step( 0.0, value.z );

    output = value.x + value.y + value.z;

    return output;
}


float decimate_add( float2  coord0             : TEXCOORD0,
                    float2  coord1             : TEXCOORD1,
                    float2  coord2             : TEXCOORD2,
                    float2  coord3             : TEXCOORD3,
                    uniform samplerRECT frame  : TEXUNIT1 ) : COLOR
{
    string id = "$Id$";

    float value;

    value  = texRECT(frame, coord0).x;
    value += texRECT(frame, coord1).x;
    value += texRECT(frame, coord2).x;
    value += texRECT(frame, coord3).x;
    value /= 4.0;
    
    return value;
}

float3 move_frame( float2   coord               : TEXCOORD0,
                   uniform samplerRECT frame    : TEXUNIT1,
                   uniform samplerRECT vector   : TEXUNIT2 ) : COLOR
{
    string id = "$Id$";

    float3 value;
    float2 vecCoord;
    float2 vec;
    float2 q, s;

    vecCoord = ((coord - 0.5) / 8.0) + 0.5;
    vec = texRECT(vector, vecCoord).xy;

    q = int(vec/2.0);
    s = vec - (q * 2.0);

    value  = texRECT(frame, coord+q).xyz;
    value += texRECT(frame, coord+q+s).xyz;
    value /= 2.0;
    
    return value;
}

float3 average_frame( float2 coord               : TEXCOORD0,
                      uniform samplerRECT frame  : TEXUNIT1,
                      uniform samplerRECT avg    : TEXUNIT2,
                      uniform float delay ) : COLOR
{
    string id = "$Id$";

    float3 value;
    float3 newval;

    value  = texRECT( avg, coord ).xyz;
    newval = texRECT( frame, coord ).xyz;

    value = ((value * delay) + newval) / (delay + 1);

    return value;
}

float3 correct_frame2( float2 coord                 : TEXCOORD0,
                       uniform samplerRECT frameA   : TEXUNIT1,
                       uniform samplerRECT frameB   : TEXUNIT2,
                       uniform float threshold ) : COLOR
{
    string id = "$Id$";

    float3 q;
    float3 value;
    float3 valA;
    float3 valB;
    float3 f1;
    float3 output;

    valA  = texRECT( frameA, coord ).xyz;
    valB  = texRECT( frameB, coord ).xyz;
    q     = abs( valA - valB );
    f1    = clamp((q - threshold) / threshold, 0.0, 1.0);

    /*
    value = (valB * (1.0-f1)) + (valA * f1);
    */
    value = lerp( valB, valA, f1 );
    output.x = ( q.x > threshold ? value.x : valB.x );
    output.y = ( q.y > threshold ? value.y : valB.y );
    output.z = ( q.z > threshold ? value.z : valB.z );

    return output;
}

float3 denoise_frame_pass2( float2 coord                : TEXCOORD0,
                            uniform samplerRECT frameA  : TEXUNIT1,
                            uniform samplerRECT frameB  : TEXUNIT2,
                            uniform float pp_threshold ) : COLOR
{
    string id = "$Id$";

    float3 d;
    float3 valA;
    float3 valB;
    float3 f1;
    float3 output;

    valA = texRECT( frameA, coord ).xyz;
    valB = texRECT( frameB, coord ).xyz;
    valB.yz = ( (valB.yz * 2.0) + valA.yz ) / 3.0;

    d       = abs( valA - valB );
    f1.x    = clamp( d.x / pp_threshold, 0.0, 1.0 );
    f1.yz   = clamp( (d.yz - pp_threshold) / pp_threshold, 0.0, 1.0 );

    /*
    output = (valA * f1) + (valB * (1.0-f1));
    */
    output = lerp(valB, valA, f1);

    return output;
}

float3 sharpen_frame( float2 coord                : TEXCOORD0,
                      uniform samplerRECT frame   : TEXUNIT1,
                      uniform float sharpen ) : COLOR
{
    string id = "$Id$";

    float3 value;
    float d;
    float m;
    float3 output;

    value = texRECT( frame, coord ).xyz;
    m  = value.x;
    m += texRECT( frame, coord + float2(1,0) ).x;
    m += texRECT( frame, coord + float2(1,1) ).x;
    m += texRECT( frame, coord + float2(0,1) ).x;
    m /= 4.0;

    d  = value.x - m;
    d *= sharpen;

    output.x = clamp( m+d, 0.062745098, 0.921568627 );
    output.yz = clamp( value.yz, 0.062745098, 0.937254902 );

    return output;
}

float4 SAD( float2 coord                 : TEXCOORD0,
            uniform samplerRECT frameA   : TEXUNIT1,
            uniform samplerRECT frameB   : TEXUNIT2,
            uniform float  factor,
            uniform float2 offset ) : COLOR
{
    string id = "$Id$";

    float sad;
    float3 diff;
    float4 newvec;

    coord = ((coord - 0.5) * factor) + 0.5;
    diff = abs( texRECT( frameA, coord ).xyz - 
                texRECT( frameB, coord + offset ).xyz );
    sad = diff.x + diff.y + diff.z;
    /*
    sad += (offset.x * offset.x);
    sad += (offset.y * offset.y);
    */
    
    newvec.xy = offset;
    newvec.z = sad;
    newvec.w = 1.0;

    return newvec;
}

float4 SAD_pass2( float2 coord                 : TEXCOORD0,
                  uniform samplerRECT frameA   : TEXUNIT1,
                  uniform samplerRECT frameB   : TEXUNIT2,
                  uniform samplerRECT vector   : TEXUNIT3,
                  uniform float  factor,
                  uniform float2 offset ) : COLOR
{
    string id = "$Id$";

    float sad;
    float3 diff;
    float4 newvec;
    float2 newoffset;

    /* Pre un-decimation coordinates for the vector */
    newoffset = texRECT( vector, coord ).xy;
    newoffset *= 2.0;
    newoffset += offset;

    /* Account for the decimation of the vector to read out of the frame */
    coord = ((coord - 0.5) * factor) + 0.5;
    diff = abs( texRECT( frameA, coord ).xyz - 
                texRECT( frameB, coord + newoffset ).xyz );
    sad = diff.x + diff.y + diff.z;
    
    newvec.xy = newoffset;
    newvec.z = sad;
    newvec.w = 1.0;

    return newvec;
}


float4 SAD_halfpel( float2 coord                 : TEXCOORD0,
                    uniform samplerRECT frameA   : TEXUNIT1,
                    uniform samplerRECT frameB   : TEXUNIT2,
                    uniform samplerRECT vector   : TEXUNIT3,
                    uniform float  factor,
                    uniform float2 offset ) : COLOR
{
    string id = "$Id$";

    float sad;
    float3 diff;
    float4 newvec;
    float2 newoffset;

    /* pre-un-decimation coordinates for the vector */
    newoffset = texRECT( vector, coord ).xy;

    /* Account for the decimation of the vector to read from the frame */
    coord = ((coord - 0.5) * factor) + 0.5;
    diff = abs( ((texRECT( frameB, coord + newoffset ).xyz + 
                  texRECT( frameB, coord + newoffset + offset ).xyz ) / 2.0 ) - 
                texRECT( frameA, coord ).xyz );
    sad = diff.x + diff.y + diff.z;
    
    newvec.xy = offset + (2 * newoffset);
    newvec.z  = sad;
    newvec.w  = 1.0;

    return newvec;
}

float3 copy( float2 coord               : TEXCOORD0,
             uniform samplerRECT frame  : TEXUNIT1 ) : COLOR
{
    string id = "$Id$";

    float3 value;

    value = texRECT(frame, coord).xyz;
    return value;
}

float4 vector_update( float2 coord                  : TEXCOORD0,
                      uniform samplerRECT oldvector : TEXUNIT1,
                      uniform samplerRECT newvector : TEXUNIT2 ) : COLOR
{
    string id = "$Id$";

    float4 outvec;
    float4 oldvec;
    float4 newvec;

    oldvec = texRECT( oldvector, coord );
    newvec = texRECT( newvector, coord );

    if( oldvec.w == 0.0 || newvec.z <= oldvec.z ) {
        outvec = newvec;
    } else {
        outvec = oldvec;
    }

    return outvec;
}


float vector_badcheck( float2 coord                 : TEXCOORD0,
                       uniform samplerRECT vector   : TEXUNIT1,
                       uniform float block_thresh ) : COLOR
{
    string id = "$Id$";

    float bad;
    float sad;

    sad = texRECT( vector, coord ).z;

    bad = ( sad > block_thresh ? 1.0 : 0.0 ); 

    return bad;
}

float4 vector_range( float2 coord                   : TEXCOORD0,
                     uniform samplerRECT vector     : TEXUNIT1,
                     uniform float2 resolution ) : COLOR
{
    string id = "$Id$";

    float4 vec;
    float2 veccoord;

    vec = texRECT( vector, coord );
    veccoord.xy = vec.xy + (coord - 0.5) * 8.0;
    if( veccoord.x < 0 || veccoord.x > resolution.x ||
        veccoord.y < 32 || veccoord.y > resolution.y + 32 ) {
        vec.xy = 0;
    }

    return vec;
}

float4 vector_low_contrast( float2 coord              : TEXCOORD0,
                            uniform samplerRECT frame : TEXUNIT1,
                            uniform float threshold ) : COLOR
{
    string id = "$Id$";

    float  value;
    float4 outvec;

    value = texRECT( frame, coord ).x;

    outvec.xyz = 1.0;
    outvec.w = 0.0;

    if( value <= threshold ) {
        /* With a SAD of 0.0, we shouldn't end up overriding this */
        outvec.xyz = 0.0;
        outvec.w = 1.0;
    }

    return outvec;
}

float scale( float2 coord               : TEXCOORD0,
             uniform samplerRECT frame  : TEXUNIT1,
             uniform float scale ) : COLOR
{
    string id = "$Id$";

    float value;

    value = texRECT(frame, coord).x / scale;
    return value;
}

float4 vector_scale( float2 coord               : TEXCOORD0,
                     uniform samplerRECT frame  : TEXUNIT1,
                     uniform float scale ) : COLOR
{
    string id = "$Id$";

    float4 value;

    value = texRECT(frame, coord);
    if(value.w == 1.0) {
        value.xy *= scale;
    }
    return value;
}


/*
 * vim:ts=4:sw=4:ai:et:si:sts=4
 */

